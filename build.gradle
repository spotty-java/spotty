plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'org.unbroken-dome.test-sets'

    java.toolchain.languageVersion = JavaLanguageVersion.of(8)

    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    testSets {
        testIntegration
    }

    dependencies {
        implementation "com.google.guava:guava:$googleGuavaVersion"

        compileOnly "org.slf4j:slf4j-api:$slf4jApiVersion"
        runtimeOnly "ch.qos.logback:logback-classic:$logbackClassicVersion"

        testImplementation "org.apache.groovy:groovy-all:$groovyVersion"
        testImplementation "org.spockframework:spock-core:$spockVersion"
        testImplementation "org.objenesis:objenesis:$objenesis"

        testIntegrationImplementation "org.apache.groovy:groovy-all:$groovyVersion"
        testIntegrationImplementation "org.spockframework:spock-core:$spockVersion"
        testIntegrationImplementation "org.objenesis:objenesis:$objenesis"
    }

    test {
        useJUnitPlatform()
    }

    testIntegration {
        useJUnitPlatform()
    }

    jacocoTestReport {
        dependsOn(test, testIntegration)
        executionData(test, testIntegration)

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                    "spotty/Spotty*",
                    "spotty/common/exception/*"
                ])
            }))
        }
    }

    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        executionData(test, testIntegration)

        violationRules {
            rule {
                limit {
                    minimum = 0.8
                }

                excludes = [
                    'spotty.Spotty',
                    'spotty.common.exception.*'
                ]
            }
        }
    }

    check.dependsOn jacocoTestCoverageVerification
}